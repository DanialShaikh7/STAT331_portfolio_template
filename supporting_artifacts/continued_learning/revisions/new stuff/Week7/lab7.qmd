---
title: "Lab 7: Functions & Fish"
author: "Danial Shaikh"
format: 
  html:
    self-contained: true
    code-tools: true
    toc: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

```{r}
library(ggplot2)
library(dplyr)
library(patchwork)


```

# **2 Part One: Summaries and Plots (Midterm Review)**

## **2.1 Summarizing Missing Data**

The measurements of each fish captured were taken by a Biologist on a raft. This lack of "laboratory setting" opens the door to the possibility of measurement errors.

-   What variable(s) have missing values present?

-   How many observations within each variable have missing values?

```{r}
# Load the data
fish_data <- read.csv("https://atheobold.github.io/stat-331/7_functions/Lab/BlackfootFish.csv")

fish_data %>%
  summarize(across(everything(), ~ sum(is.na(.))))

```

## **2.2 Visualizing Missing Data**

Unfortunately, these missing values are not for only one `year`, `trip`, or `section` of river.

Create a thoughtful visualization exploring the frequency of missing values across the different years, sections, and trips.

```{r}

# Create a new data frame to count the number of missing values for each combination of year, section, and trip
missing <- is.na(fish_data)
missing_prop <- apply(missing, 1, mean)
missing_prop_df <- data.frame(trip = fish_data$trip, section = fish_data$section, year = fish_data$year, prop_missing = missing_prop)

# heatmap
ggplot(missing_prop_df, aes(trip, section, fill = prop_missing)) +
  geom_tile() +
  scale_fill_gradient(low = "white", high = "red") +
  facet_wrap(~ year, ncol = 3) +
  xlab("Trip") +
  ylab("Section") +
  labs(fill = "Proportion\nMissing") +
  theme_minimal()

```

# **3 Part Two: Adjusting the Data (Function Writing)**

The following `R` code would carry out this rescaling procedure for the `length` and `weight` columns of the data:

```{r}
BlackfootFish <- BlackfootFish |> 
  mutate(length = (length - min(length, na.rm = TRUE)) / 
           (max(length, na.rm = TRUE) - min(length)), 
         weight = (weight - min(weight, na.rm = TRUE)) / 
           (max(weight, na.rm = TRUE) - min(length, na.rm = TRUE))
         )

```

## **3.1 Writing a Function**

Let's transform the repeated process above into a `rescale_01()` function.

-   The function should take a single vector as its input.

-   The function should return the rescaled vector.

```{r}
rescale_01 <- function(x){
  if (!is.numeric(x)) {
    stop("This is a non numeric vector, enter a numeric vector")
  }
  if (length(x) <= 1) {
    stop("Input vector size must be greater than 1.")
  }
  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
```

## **3.2 Adding Stops**

Now, let's incorporate some checks into your function! Modify your previous code to create the following checks:

-   the function should stop if the input vector is not numeric

-   the function should stop if the length of the vector is not greater than 1

## **3.3 Performing a Simple Test**

First, test your function on the simple vector below. **Add code** that verifies the maximum of your rescaled vector is 1 and the minimum is 0!

```{r}
x <- c(1:85, NA)
z <- c(1:6, NA)
y<- c(5:99, NA)

rescaled <- rescale_01(x)

min(rescaled, na.rm = TRUE)
```

```{r}
max(rescaled, na.rm = TRUE)
```

## **3.4 Performing a More Difficult Test**

Next, let's test the function on the `length` column of the `BlackfootFish` dataset.

Make plots of the original values of `length` and the rescaled values of `length`. Output your plots **stacked vertically**, so the reader can confirm the only aspect that has changed is the scale.

```{r}
original_plot <- fish_data |>  
  ggplot(aes(x = length)) + 
  geom_histogram(binwidth = 45) +
  labs(x = "Original Values of Length") +
  scale_y_continuous(limits = c(0,4000))

scaled_plot <- fish_data %>% 
  mutate(length_scaled = rescale_01(length)) %>% 
  ggplot(aes(x = length_scaled)) + 
  geom_histogram(binwidth = 0.045) +
  labs(x = "Scaled Values of Length") +
  scale_y_continuous(limits = c(0, 4000))

# Output plots side-by-side
original_plot + scaled_plot + plot_layout(ncol = 1)
```

## **3.5 Incorportaing Variables**

Suppose you would like to make a more general `rescale_column()` function that perform operations on any variable within a dataset. Ideally, your function would take a dataframe and a variable name as inputs and return a dataframe where the variable has been rescaled.

Create a `rescale_column()` that accepts two arguments:

1.  a dataframe

2.  the name(s) of the variable(s) to be rescaled

The body of the function should call the original `rescale_01()` function you wrote previously.

```{r}
rescale_column <- function(data, variables){
  for (each in variables) {
      data[[paste(each, "scaled")]] <- rescale_01(data[[each]])
  }
  return(data)
}
```

## **3.6 Another Function Test**

Alright, now let's put your `rescale_column()` function to work! Use your `rescale_column()` function to rescale **both** the `length` and `weight` columns.

**Danger**

I expect that you carry out this process by calling the `rescale()` function *one* time!

I advise against using functions like `mutate_at()`, which have been superseded.

```{r}
scaled_fish_data%>%
  head()
```

```{r}
scaled_fish_data <- rescale_column(fish_data, c("length", "weight"))
original_values <- fish_data %>%
  select(length, weight) %>%
  head()
scaled_values <- scaled_fish_data %>%
  select(length, weight) %>%
  head()
cbind(original_values, scaled_values)
```
